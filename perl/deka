#!/usr/bin/perl -w # -*- perl -*-
#
# $Id: deka,v 1.2 2002-11-23 17:07:03 grahn Exp $
# 

use strict;
use integer;

my %tab;
my ($min, $max) = (10000, 0);

while(<>) {

    /^.+?:\s*(\d+)/ or die;
    my $dekad = date2dekad($1);

    $min = $dekad if $dekad < $min;
    $max = $dekad if $dekad > $max;

    $tab{$dekad} ++;
}

my $i;
foreach $i ($min .. $max) {

    $tab{$i} = 0 unless  defined($tab{$i});

    my $sdate = dekad2date($i);
    print "$sdate $tab{$i}\n";
}

exit 0;

# convert a date on the form yyyymmdd
# to dekad no, where I define 'dekad no' as
# the number of dekads since Epoch.
#
# I have found no really good definition of
# 'dekad', so I just use it as a term for splitting
# a month in three parts:
# 1st --10th
# 11th--20th
# 21th--last day of month
#
# Thus a decad spans 8--11 days, the mean
# being <can't figure that out right now>
#
sub date2dekad {
    my $date = shift;
    my $year = $date / 10000;
    my $month = ($date / 100) % 100;
    my $dom = $date % 100;
    my $dekad = ($year-1970) * 12 * 3;
    $dekad += ($month-1) * 3;
    $dekad++ if $dom>10;
    $dekad++ if $dom>21;

    return $dekad;
}

# The reverse; returns the first
# date of the 'dekad'.
#
sub dekad2date {
    my $dekad = shift;
    my $date = 1970 + ($dekad / (12*3));

    $date = $date*100 + ($dekad % (12*3))/3 + 1;

    $date = $date*100 + ($dekad % 3)*10 + 1;

    return $date;
}
